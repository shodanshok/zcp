#!/usr/bin/env python3

# pylint: disable=anomalous-backslash-in-string,missing-module-docstring
# pylint: disable=redefined-outer-name,missing-function-docstring
# pylint: disable=subprocess-run-check,consider-using-with,invalid-name

import os
import re
import sys
import argparse
import tempfile
import datetime
import subprocess

# globals
diff = []
src = {
    "inode": None,
    "size": None,
    "path": None,
    "dataset": None,
    "mount": None,
    "relative": None,
    "tmp": None,
    "recordsize": None,
    "result": None,
    "records": {},
}
dst = {
    "inode": None,
    "size": None,
    "path": None,
    "dataset": None,
    "mount": None,
    "relative": None,
    "tmp": None,
    "recordsize": None,
    "result": None,
    "records": {},
}


def execute(cmd):
    message(cmd, 2)
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result:
        if result.stderr:
            sys.stderr.write(result.stderr)
            sys.exit()
        else:
            return result
    return None


def background(cmd, tgt):
    message(cmd, 2)
    result = subprocess.Popen(cmd, stdout=tgt["tmp"], stderr=subprocess.DEVNULL)
    if result:
        if result.stderr:
            sys.stderr.write(result.stderr)
            sys.exit()
        else:
            return result
    return None


def message(msg, level=0):
    if args.verbose >= level:
        if args.timestamp:
            print("[" + datetime.datetime.now().isoformat() + "] ", end="")
        print(msg)


# start
start = datetime.datetime.now().timestamp()

# arg parsing
parser = argparse.ArgumentParser(description="zcp is the zfs fast copy program")
parser.add_argument("srcfile")
parser.add_argument("dstfile")
parser.add_argument(
    "-v",
    "--verbose",
    action="count",
    default=0,
    help="verbose",
)
parser.add_argument(
    "-t",
    "--timestamp",
    action="store_true",
    default=False,
    help="print detailed timestamps",
)
parser.add_argument(
    "-n",
    "--dryrun",
    action="store_true",
    default=False,
    help="dry run (do not alter destination file)",
)
parser.add_argument(
    "-c",
    "--checksum",
    action="store_true",
    default=False,
    help="use checksum-based comparison (default: dva-based)",
)
parser.add_argument(
    "-d",
    "--dva",
    action="store_true",
    default=False,
    help="force dva-based comparison",
)
args = parser.parse_args()
src["path"] = args.srcfile
dst["path"] = args.dstfile
if args.dva:
    args.checksum = False

# create dst file if not exists
if not os.path.exists(dst["path"]):
    dstfile = open(dst["path"], "w+b")
    dstfile.flush()
    dstfile.close()

# find datasets and stat info
for tgt in (src, dst):
    result = execute(["df", "--type=zfs", "--output=source", tgt["path"]])
    tgt["dataset"] = result.stdout.splitlines()[1]
    result = execute(["df", "--type=zfs", "--output=target", tgt["path"]])
    tgt["mount"] = result.stdout.splitlines()[1]
    tgt["relative"] = tgt["path"].replace(tgt["mount"], "").lstrip("/")
    result = execute(["stat", "--format=%i,%s,%o", tgt["path"]])
    tgt["inode"], size, recordsize = result.stdout.strip().split(",")
    tgt["size"] = int(size)
    tgt["recordsize"] = int(recordsize)

# recordsize check
if src["recordsize"] != dst["recordsize"]:
    sys.stderr.write(
        "Mismatched recordsize ("
        + src["recordsize"]
        + " vs "
        + dst["recordsize"]
        + "), aborting\n"
    )
    sys.exit(1)

# if source is a file, we need checksum comparison
if "@" not in str(src["dataset"]) and not args.dva:
    message("Copying unrelated files, dva-based comparison unavailable")
    args.checksum = True

# warn if using checksum-based comparison
if args.checksum:
    message("Checksum comparison selected, beware of collisions!")

# sync pool and write record map into temp files
message("Synching pool and running zdb", 1)
execute(["zpool", "sync"])
for tgt in (src, dst):
    tgt["tmp"] = tempfile.TemporaryFile(mode="w+")
    cmd = ["zdb", "-Ovv", tgt["dataset"], tgt["relative"]]
    tgt["result"] = background(cmd, tgt)
src["result"].communicate()
dst["result"].communicate()
src["tmp"].flush()
dst["tmp"].flush()
src["tmp"].seek(0)
dst["tmp"].seek(0)

# scan records
# checksum: beware of collisions
# safe/default: dva-based, no collision but more writes
if args.checksum:
    for tgt in (src, dst):
        for line in tgt["tmp"].readlines():
            m = re.search("^\s+ (\w+) +L0", line)
            if m:
                record = m.group(1)
                m = re.search("cksum=(\S+)", line)
                if m:
                    cksum = m.group(1)
                else:
                    if "L0 0:0:0" in line:
                        cksum = "ZERO"
                    else:
                        cksum = "NULL"
                tgt["records"][record] = cksum
else:
    message("DVA (safe) comparison selected", 1)
    for tgt in (src, dst):
        for line in tgt["tmp"].readlines():
            m = re.search("^\s+ (\w+) +L0 +([\w:]+)", line)
            if m:
                record = m.group(1)
                cksum = m.group(2)
                tgt["records"][record] = cksum

# compare records
# src to dst
message("Comparing src and dst records", 1)
for record in src["records"]:
    scksum = src["records"][record]
    if record in dst["records"]:
        dcksum = dst["records"][record]
        if scksum != "NULL" and scksum == dcksum:
            message("SAME: " + record + " src:" + scksum + " dst:" + dcksum, 3)
        else:
            diff.append(record)
            message("DIFF: " + record + " src:" + scksum + " dst:" + dcksum, 3)
    else:
        if scksum == "ZERO":
            message("SAME: " + record + " src:" + scksum + " dst:ZERO", 3)
        else:
            diff.append(record)
            message("DIFF: " + record + " src:" + scksum + " dst:ZERO", 3)
# dst to src (missing records only)
for record in dst["records"]:
    if int(record, 16) >= src["size"]:
        break
    dcksum = dst["records"][record]
    if record not in src["records"]:
        if dcksum == "ZERO":
            message("SAME: " + record + " src:ZERO" + " dst:" + dcksum, 3)
        else:
            diff.append(record)
            message("DIFF: " + record + " src:ZERO" + " dst:" + dcksum, 3)

stop1 = datetime.datetime.now().timestamp()
delta = stop1 - start
speed = round((src["size"] + dst["size"]) / delta / 1024 / 1024, 2)
message("File scan speed:   " + str(speed) + " MB/s, " + str(round(delta, 2)) + "s", 1)

# sync files
if not args.dryrun:
    srcfile = open(src["path"], "rb")
    dstfile = open(dst["path"], "r+b")
    srcfile.seek(0)
    dstfile.seek(0)
    for record in diff:
        message("WRITE: " + str(src["recordsize"]) + " bytes at " + record, 3)
        record = int(record, 16)
        srcfile.seek(record)
        dstfile.seek(record)
        data = srcfile.read(src["recordsize"])
        dstfile.write(data)
    dstfile.truncate(int(src["size"]))
    dstfile.flush()
    written = len(diff) * src["recordsize"]
else:
    written = 0

# misc stats
stop2 = datetime.datetime.now().timestamp()
delta = stop2 - start
speed = round((src["size"] + dst["size"]) / delta / 1024 / 1024, 2)
diffmb = round(len(diff) * src["recordsize"] / 1024 / 1024, 3)
writtenmb = round(written / 1024 / 1024, 3)
message("Actual copy speed: " + str(speed) + " MB/s, " + str(round(delta, 2)) + "s", 1)
message("Record size:       " + str(src["recordsize"]) + " bytes", 1)
message("Different records: " + str(len(diff)), 1)
message("Different data:    " + str(diffmb) + " MB", 1)
message("Written data:      " + str(writtenmb) + " MB", 1)
